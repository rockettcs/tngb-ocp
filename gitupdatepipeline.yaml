apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: git
  name: git-update-pipeline
  labels:
    app.kubernetes.io/version: '0.1'
    operator.tekton.dev/provider-type: community
spec:
  description: This Task can be used to update image digest in a Git repo using kustomize
  params:
    - default: 'http://172.16.18.199/atlas-esb-camel3/openshift-pipelines.git'
      description: git url to clone
      name: url
      type: string
    - default: master
      description: 'git revision to checkout (branch, tag, sha, refâ€¦)'
      name: revision
      type: string
    - default: ''
      description: (optional) git refspec to fetch before checking out revision
      name: refspec
      type: string
    - default: 'true'
      description: defines if the resource should initialize and fetch the submodules
      name: submodules
      type: string
    - default: '1'
      description: performs a shallow clone where only the most recent commit(s) will be fetched
      name: depth
      type: string
    - default: 'true'
      description: defines if http.sslVerify should be set to true or false in the global git config
      name: sslVerify
      type: string
    - default: ''
      description: subdirectory inside the "output" workspace to clone the git repo into
      name: subdirectory
      type: string
    - default: ''
      description: defines which directories patterns to match or exclude when performing a sparse checkout
      name: sparseCheckoutDirectories
      type: string
    - default: 'true'
      description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
      name: deleteExisting
      type: string
    - default: ''
      description: git HTTP proxy server for non-SSL requests
      name: httpProxy
      type: string
    - default: ''
      description: git HTTPS proxy server for SSL requests
      name: httpsProxy
      type: string
    - default: ''
      description: git no proxy - opt out of proxying HTTP/HTTPS requests
      name: noProxy
      type: string
    - default: 'true'
      description: log the commands used during execution
      name: verbose
      type: string
    - default: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:429ba9c10dfcff4ee0154ab75f9bd06fd306f019c0ed0b062ba7c03e56e3e33b'
      description: the image used where the git-init binary is
      name: gitInitImage
      type: string
    - name: IMAGE_TAG
      type: string
    - name: USER_EMAIL
      type: string
    - name: USER_NAME
      type: string
  results:
    - description: The commit SHA
      name: commitSHA
      type: string
  steps:
    - computeResources: {}
      env:
        - name: HOME
          value: /tekton/home
      image: $(params.gitInitImage)
      name: pipeline-clone
      script: |
        #!/bin/sh
        set -eu -o pipefail

        CHECKOUT_DIR="$(workspaces.output.path)/pipelines"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            # Delete non-hidden files and directories
            rm -rf "$CHECKOUT_DIR"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }

        if [[ "$(params.deleteExisting)" == "true" ]] ; then
          cleandir
        fi

        /ko-app/git-init \
          -url "$(params.url)" \
          -revision "$(params.revision)" \
          -refspec "$(params.refspec)" \
          -path "$CHECKOUT_DIR" \
          -sslVerify="$(params.sslVerify)" \
          -submodules="$(params.submodules)" \
          -depth "$(params.depth)" \
          -sparseCheckoutDirectories "$(params.sparseCheckoutDirectories)"
        cd "$CHECKOUT_DIR"

        ls
        pwd
    - computeResources: {}
      env:
        - name: HOME
          value: /tekton/home
      image: mikefarah/yq
      name: update-image-tag
      script: |
        #!/bin/sh

        CHECKOUT_DIR="$(workspaces.output.path)/pipelines"
        cd $CHECKOUT_DIR
        ls
        NEW_IMAGE_TAG=$(echo "$(params.IMAGE_TAG)" | cut -c2- ) NEW_IMAGE_TAG=$((NEW_IMAGE_TAG+1))
        echo "########################## v$NEW_IMAGE_TAG"
        export replacement="v$NEW_IMAGE_TAG"

        yq -i '.application.$(params.subdirectory).imagetag=env(replacement)' 'values.yaml'
        echo "### values.yaml ###"
        echo "##########################"
        cat values.yaml
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
      workingDir: $(workspaces.output.path)
    - computeResources: {}
      env:
        - name: HOME
          value: /tekton/home
      image: $(params.gitInitImage)
      name: git-commit-pipelines
      script: |
        CHECKOUT_DIR="$(workspaces.output.path)/pipelines"
        cd $CHECKOUT_DIR

        git config user.email $(params.USER_EMAIL)
        git config user.name $(params.USER_NAME)
        git status
        git add values.yaml
        git commit -m "update values.yaml"
        git push origin HEAD:$(params.revision) 
        echo "########################## Git Commited " 
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: output
